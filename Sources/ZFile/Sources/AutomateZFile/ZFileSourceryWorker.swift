//
//  DemoSourceryWorker.swift
//  Automate
//
//  Created by Stijn on 16/12/2018.
//  Copyright © 2018 dooz. All rights reserved.
//

import Foundation
import SourceryAutoProtocols
import ZFile
import Terminal
import SourceryWorker
import SignPost

protocol ZFileSourceryWorkerProtocol {
    /// sourcery:inline:DemoSourceryWorker.AutoGenerateProtocol
    
    
    /// sourcery:end
}

struct ZFileSourceryWorker: ZFileSourceryWorkerProtocol, AutoGenerateProtocol {
    
    static let rootFolderPrefix: String = "--rootFolder:"
    
    let autoGeneratedCodeFolder: FolderProtocol
    let workers: [SourceryWorkerProtocol]

    private let signPost: SignPostProtocol
    private static let commonImportAutoMockable = Set([
        TemplatePrepend.Import(name: "SourceryAutoProtocols"),
        TemplatePrepend.Import(name: "Foundation"),
        TemplatePrepend.Import(name: "os"),
        ])
    
    enum Target: String, CaseIterable {
        case ZFile
        case AutomateZFile
        case FoundationGenericHelper
        
        func imports() -> Set<TemplatePrepend> {
            
            // Insert the target itself
            var importNames = ZFileSourceryWorker.commonImportAutoMockable
            importNames.insert(TemplatePrepend.Import(name: self.rawValue))
            importNames.insert(TemplatePrepend.Import(name: VendorFramework.FoundationGenericHelper.rawValue))
            
            // If not the default, add a case and insert imports into importNames
            switch self {
            default:
                return Set([TemplatePrepend(name: importNames, template: Template.AutoMockable.rawValue)])
            }
        }
    }
    
    enum VendorFramework: String, CaseIterable {
        case ZFile
        case FoundationGenericHelper
    }
    
    enum Template: String {
        case AutoMockable
    }
    
    init(
        signPost: SignPostProtocol = SignPost.shared
    ) throws {
        self.signPost = signPost
        
        guard let relativeRootFolderPath: String = (CommandLine.arguments.first { $0.hasPrefix(ZFileSourceryWorker.rootFolderPrefix) }?.replacingOccurrences(of: ZFileSourceryWorker.rootFolderPrefix, with: "")) else {
            throw Error.noCommandlineArgumentForRootFolder
        }
        
        let projectFolder = try Folder(relativePath: relativeRootFolderPath)

        signPost.message("💁🏻‍♂️ Project at \n \(projectFolder) \n")
        
        let sourcesFolder = try projectFolder.subfolder(named: "Sources")
        let temp =  try projectFolder.parentFolder().parentFolder()
        let carthageFolder = try temp.subfolder(named: "Carthage")
        
        let highwayFolder = try Folder(relativePath: "Checkouts/highway", to: carthageFolder)
        let templateFolder = try Folder(relativePath: "Checkouts/template-sourcery/Sources/stencil", to: carthageFolder)
        let sourceryAutoProtocolFile = try highwayFolder.file(named: "/Sources/highway/Sources/SourceryAutoProtocols/SourceryAutoProtocols.swift")
        let autoGeneratedCodeFolder = try projectFolder.createSubfolderIfNeeded(withName: "Sources/AutoGeneratedCode")
        let sourceryExecutableFile = try SourceryBuilder().attemptToBuildSourceryIfNeeded()
        
        let sourcerySequence = try Target.allCases.map { target in
            return try Sourcery(
                sourcesFolders: [sourcesFolder.subfolder(named: target.rawValue)],
                individualSourceFiles: nil,
                templateFolder: templateFolder,
                outputFolder: try autoGeneratedCodeFolder.createSubfolderIfNeeded(withName: target.rawValue),
                sourceryAutoProtocolsFile: sourceryAutoProtocolFile,
                sourceryYMLFile: try projectFolder.createFileIfNeeded(named: ".sourcery-\(target.rawValue).yml"),
                imports: target.imports(),
                sourceryExecutableFile: sourceryExecutableFile
            )
        }
        
        try sourcerySequence.forEach {
            signPost.verbose("""
                > \($0.sourceryYMLFile.path)
                
                ```yml
                \(try $0.sourceryYMLFile.readAsString())
                ```
                
                """
            )
        }
        
        self.autoGeneratedCodeFolder = autoGeneratedCodeFolder
        self.workers =  try sourcerySequence.map { try SourceryWorker(sourcery: $0) }
        
    }
    
    // MARK: - Error
    
    enum Error: Swift.Error {
        case noCommandlineArgumentForRootFolder
    }
}
