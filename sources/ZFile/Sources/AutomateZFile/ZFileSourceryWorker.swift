//
//  DemoSourceryWorker.swift
//  Automate
//
//  Created by Stijn on 16/12/2018.
//  Copyright © 2018 dooz. All rights reserved.
//

import Foundation
import SourceryAutoProtocols
import ZFile
import Terminal
import SourceryWorker
import SignPost

protocol ZFileSourceryWorkerProtocol {
    //// sourcery:inline:DemoSourceryWorker.AutoGenerateProtocol
    
    func attempt() throws
    
    //// sourcery:end
}

struct ZFileSourceryWorker: ZFileSourceryWorkerProtocol, AutoGenerateProtocol {
    
    let autoGeneratedCodeFolder: FolderProtocol
    
    private let signPost: SignPostProtocol
    private let workers: [SourceryWorkerProtocol]
    private static let commonImportAutoMockable = Set([
        TemplatePrepend.Import(name: "SourceryAutoProtocols"),
        TemplatePrepend.Import(name: "Foundation"),
        TemplatePrepend.Import(name: "os"),
        ])
    
    enum Target: String, CaseIterable {
        case ZFile
        
        func imports() -> Set<TemplatePrepend> {
            
            // Insert the target itself
            var importNames = ZFileSourceryWorker.commonImportAutoMockable
            importNames.insert(TemplatePrepend.Import(name: self.rawValue))
            
            // If not the default, add a case and insert imports into importNames
            switch self {
            default:
                return Set([TemplatePrepend(name: importNames, template: Template.AutoMockable.rawValue)])
            }
        }
    }
    
    enum VendorFramework: String, CaseIterable {
        case ZFile
    }
    
    enum Template: String {
        case AutoMockable
    }
    
    enum Error: Swift.Error, CustomStringConvertible {
        var description: String { return "⚠️ You are running in derived data folder. See README of project on github doozMen/highway to change your project settings!"}
        
        case runningInDerivedDataFolder
        
    }
    
    init(signPost: SignPostProtocol = SignPost.shared, autoGeneratedCodeFolder: FolderProtocol? = nil,  workers: [SourceryWorkerProtocol]? = nil) throws {
        self.signPost = signPost
        
        guard workers == nil, autoGeneratedCodeFolder == nil else {
            self.workers = workers!
            self.autoGeneratedCodeFolder = autoGeneratedCodeFolder!
            return
        }
        
        let currentFolder = FileSystem().currentFolder
        signPost.message("💁🏻‍♂️ Running in folder\n \(currentFolder)\n")

        guard !currentFolder.path.contains("DerivedData") else {
            throw Error.runningInDerivedDataFolder
        }
        
        var carthageFolder: FolderProtocol!
        let projectFolder = try currentFolder.parentFolder().parentFolder().parentFolder()
        signPost.verbose("💁🏻‍♂️ Project in folder\n \(projectFolder.path)\n")
        var sourcesFolder = try projectFolder.parentFolder()
        signPost.verbose("💁🏻‍♂️ Sources in folder\n \(sourcesFolder.path)\n")

        do {
            
            carthageFolder = try sourcesFolder.subfolder(named: "Carthage")
        } catch {
            signPost.verbose("💁🏻‍♂️ Not running in .build.nosync/Debug folder, trying to run from current folder.")
            sourcesFolder = currentFolder
            carthageFolder = try currentFolder.subfolder(named: "Carthage")
        }
        
        let highwayFolder = try Folder(relativePath: "Checkouts/highway", to: carthageFolder)
        let templateFolder = try Folder(relativePath: "Checkouts/template-sourcery/sources/stencil", to: carthageFolder)
        let sourceryAutoProtocolFile = try highwayFolder.file(named: "/Sources/AutoGeneratedCode/SourceryAutoProtocols.swift")
        let autoGeneratedCodeFolder = try projectFolder.createSubfolderIfNeeded(withName: "sources/AutoGeneratedCode")
        
        let sourcerySequence = try Target.allCases.map { target in
            return try Sourcery(
                sourcesFolders: [sourcesFolder.subfolder(named: target.rawValue)],
                individualSourceFiles: nil,
                templateFolder: templateFolder,
                outputFolder: try autoGeneratedCodeFolder.createSubfolderIfNeeded(withName: target.rawValue),
                sourceryAutoProtocolsFile: sourceryAutoProtocolFile,
                sourceryYMLFile: try projectFolder.createFileIfNeeded(named: ".sourcery-\(target.rawValue).yml"),
                imports: target.imports()
            )
        }
        
        signPost.verbose("🧙‍♂️ Sourcery will run from config files ...")
        try sourcerySequence.forEach {
            signPost.verbose("""
                > \($0.sourceryYMLFile.path)
                
                ```yml
                \(try $0.sourceryYMLFile.readAsString())
                ```
                
                """
            )
        }
        
        self.autoGeneratedCodeFolder = autoGeneratedCodeFolder
        self.workers =  try sourcerySequence.map { try SourceryWorker(sourcery: $0) }
        
    }
    
    // MARK: - Sourcery Setup
    
    
    
    func attempt() throws {
        return try workers.forEach {
            let output = try $0.attempt()
            signPost.verbose("\(output.joined(separator: "\n"))")
        }
    }
}
